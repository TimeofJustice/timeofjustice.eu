name: Production
on:
  push:
    branches: [ main ]
    paths:
      - frontend/**
      - backend/**
      - .github/workflows/production.yml
      - .docker/**

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Test frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Setup backend environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Test backend
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          python manage.py check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker Compose image
        run: |
          docker compose --profile production build
          docker push ghcr.io/timeofjustice/timeofjustice.eu:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | tee ~/.ssh/id_rsa > /dev/null
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose.yml
        run: |
          scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_STAGING_PATH }}

      - name: Pull container and deploy on remote server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/timeofjustice/timeofjustice.eu:latest
            cd ${{ secrets.SSH_PATH }}
            docker compose --profile production up -d --remove-orphans
          EOF
